@model ServerSide.Models.ViewModels.CartItemEditVm

@{
    ViewData["Title"] = "編輯購物車物品資料";
}

<div class="container-fluid">
    <h1 class="fw-bolder mb-3 mx-4">編輯購物車物品資料</h1>
    <div class="card m-4">
        <div class="card-body">
            <div class="col-md-12">
                <form asp-action="Edit" id="editCartItemForm">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input type="hidden" asp-for="Id" />
                    <div class="form-group">
                        <label asp-for="CartId" class="control-label"></label>
                        <input asp-for="CartId" class="form-control" />
                        <span asp-validation-for="CartId" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="TicketId" class="control-label"></label>
                        <input asp-for="TicketId" class="form-control" id="TicketId" />
                        <span asp-validation-for="TicketId" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="TicketName" class="control-label"></label>
                        <input asp-for="TicketName" class="form-control" id="TicketName" readonly />
                        <span asp-validation-for="TicketName" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="TicketPrice" class="control-label"></label>
                        <input asp-for="TicketPrice" class="form-control" id="price" readonly />
                        <span asp-validation-for="TicketPrice" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Qty" class="control-label"></label>
                        <input asp-for="Qty" class="form-control" id="Qty" />
                        <span asp-validation-for="Qty" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="SubTotal" class="control-label"></label>
                        <input asp-for="SubTotal" class="form-control" id="SubTotal" readonly />
                        <span asp-validation-for="SubTotal" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <a asp-action="Index" class="btn btn-secondary me-4">回到購物車物品清單</a>
                        <input type="submit" value="儲存" class="btn btn-primary me-2" />
                    </div>
                </form>
                <form asp-action="DeleteCartItem" id="deleteCartItemForm">
                    @* **問題的根源**: *@
                    @* 問題的根源在於，你的刪除表單並沒有正確地將 `CartId` 和 `TicketId` 傳遞給 `DeleteCartItem` Action 方法。因為刪除表單中沒有任何隱藏欄位或是其他輸入元素來儲存這兩個值。 *@
                    @* **解決方法**: *@
                    @* 你需要在刪除表單中加入隱藏欄位，以傳遞 `CartId` 和 `TicketId` 的值。這些值應該從頁面上讀取，因為他們在編輯表單的資料中已經存在。 *@
                    <input type="hidden" asp-for="CartId" />
                    <input type="hidden" asp-for="TicketId" />
                    <div class="mb-3">
                        <input type="submit" value="刪除" class="btn btn-danger btn-sm" />
                    </div>
                </form>

            </div>
        </div>

    </div>
</div>

@* 目前有無法判斷整個購物車項目總數不能超過6的bug *@
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(function () {
            $('#editCartItemForm').submit(function (e) {
                e.preventDefault(); // Prevent default form submission
                Swal.fire({
                    title: '確認編輯該項購物車物品',
                    text: '您確定要儲存該項購物車物品的編輯嗎？',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: '是的，儲存編輯',
                    cancelButtonText: '取消'
                }).then((result) => {
                    if (result.isConfirmed) {
                        this.submit(); // Manually submit form if confirmed
                    }
                });
            });
            $('#deleteCartItemForm').submit(function (e) {
                e.preventDefault(); // Prevent default form submission
                Swal.fire({
                    title: '確認刪除該項購物車物品',
                    text: '您確定要刪除該項購物車物品嗎？',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: '是的，刪除該項購物車物品',
                    cancelButtonText: '取消'
                }).then((result) => {
                    if (result.isConfirmed) {
                        this.submit(); // Manually submit form if confirmed
                    }
                });
            });
        });

        var price;
         //計算並帶入小計到頁面
          $(document).ready(function () {
            // 儲存原始的 Qty 值
            var originalQty = parseInt($('#Qty').val()) || 0;
             // 在页面初始化完成后，立刻将当前 #Qty 的值保存起来
            originalQty = parseInt($('#Qty').val()) || 0;

             $('#TicketId').change(function () {
                 var ticketId = $(this).val();
                console.log("ticketId: ",ticketId); // 確認 ticketId 是否有值
                 $.ajax({
                    url: '/CartItems/GetTicket',
                     type: 'GET',
                     data: { ticketId: ticketId },
                    success: function (response) {
                        if (response && response.data && response.data.price && response.data.name) {
                            price = response.data.price;
                             $('#price').val(price);
                            $('#TicketName').val(response.data.name);
                              // 更新 originalQty 的值
                             originalQty = parseInt($('#Qty').val()) || 0;
                              calculateSubTotal();// 重新計算小計
                         } else {
                             console.error('Invalid data structure from server:', response);
                            $('#price').val(''); // 清空 price 欄位
                            $('#TicketName').val('');// 清空 TicketName 欄位
                            alert('伺服器回應的資料格式錯誤，請檢查伺服器端程式碼。')
                         }
                    },
                     error: function (error) {
                         console.error('Error fetching ticket data:', error);
                        $('#price').val(''); // 清空 price 欄位
                          $('#TicketName').val('');// 清空 TicketName 欄位
                         alert('無法載入票券資料，請檢查伺服器端程式碼。')
                   }
                 });
            });
             // 算出總價
            function calculateSubTotal() {
                 var qty = parseInt($('#Qty').val()) || 0;
                // 從 `#price` 輸入欄位讀取價格，而不是依賴全域變數
                var price = parseFloat($('#price').val()) || 0;
                 var subTotal = price * qty;
               $('#SubTotal').val(subTotal);
           }
            // 更換 總價數量
            $('#price, #Qty').change(function () {
                 var currentQty = parseInt($('#Qty').val()) || 0;
                // 計算要新增或減少的數量
                var quantityToAdd = currentQty - originalQty;

                  // 單一商品數量驗證 (Synchronous)
               if (currentQty > 6) {
                     Swal.fire({
                        title: '錯誤',
                         text: '單一商品數量不能超過 6',
                         icon: 'error'
                      });
                     $('#Qty').val(6);
                   // 更新 originalQty 的值
                     originalQty = 6;
                    calculateSubTotal();// 重新計算小計
                    return; // 在單一商品數量驗證失敗後直接結束，避免其他邏輯被執行。
               }

               // 購物車總數量驗證(Asynchronous)
               var cartId = parseInt($('#CartId').val()) || 0;
               var ticketId = parseInt($('#TicketId').val()) || 0;

                 if(cartId !== 0)
                 {

                        $.ajax({
                           url: '/CartItems/CheckCartQuantity',
                           type: 'GET',
                           data: { cartId: cartId, quantityToAdd: quantityToAdd, ticketIdToExclude: ticketId },
                           success: function (response) {

                            if(response && response.currentTotal)
                             {
                                     //  購物車總數量驗證 (Javascript side check)
                                     if (response.currentTotal + quantityToAdd > 6)
                                      {
                                           Swal.fire({
                                              title: '錯誤',
                                              text: `購物車內商品總數量不能超過 6。目前數量: ${response.currentTotal} ，您想新增數量: ${quantityToAdd}`,
                                                icon: 'error'
                                           });
                                           // 更新 #Qty 的值到 ajax 發送前的值
                                            $('#Qty').val(originalQty);

                                     }
                              }
                            // 更新 originalQty 的值
                            originalQty = parseInt($('#Qty').val())|| 0;
                             calculateSubTotal();// 重新計算小計

                        },
                         error: function (error) {
                            console.error('Error checking cart quantity:', error);
                            alert('無法檢查購物車數量，請檢查網路連線或伺服器端程式碼。')
                         }
                      });

                 }
                 else
                 {
                     //  如果 cartId 為0 代表不需要非同步驗證
                      // 更新 originalQty 的值
                       originalQty = currentQty;
                       calculateSubTotal();// 重新計算小計
                }

             });
         });
    </script>
}