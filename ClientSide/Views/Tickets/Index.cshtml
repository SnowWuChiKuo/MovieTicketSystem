@model List<ClientSide.Models.ViewModels.TicketVm>
@{
    ViewBag.Title = "映悅 CineMoment - 開始訂票";

}


<div id="app" class="container" style="margin-top: 120px">
    <div class="row">
        <div class="col-lg-12">
            <h1 class="mvTitle mb-4">開始訂票</h1>
        </div>
    </div>

    <!-- 電影資訊區塊 -->
    <div class="row mb-4">
        <!-- 海報卡片 -->
        <div class="col-lg-6">
            <el-card class="box-card poster-card">
                <img :src="movie.poster" :alt="movie.title">
                <div class="rating-container">
                    <div class="rating-header">
                        <h3 class="movie-title">{{ movie.title }}</h3>
                        <div class="rating-content">
                            <el-rate v-model="movie.rating_score"
                                    disabled
                                    show-score
                                    text-color="#ff9900"
                                    score-template="{value} 分">
                            </el-rate>
                            <span class="rating-count">{{ movie.rating_count }} 人評分</span>
                        </div>
                    </div>
                </div>
            </el-card>
        </div>
        
        <!-- 資訊卡片 -->
        <div class="col-lg-6 info-container">
            <el-card class="box-card">
                <el-descriptions :column="1" border:false class="movie-info">
                    <el-descriptions-item label="種類">{{ movie.genre }}</el-descriptions-item>
                    <el-descriptions-item label="級別">{{ movie.rating }}</el-descriptions-item>
                    <el-descriptions-item label="片長">{{ movie.duration }}</el-descriptions-item>
                    <el-descriptions-item label="上映日">{{ movie.releaseDate }}</el-descriptions-item>
                    <el-descriptions-item label="導演">{{ movie.director }}</el-descriptions-item>
                </el-descriptions>
            </el-card>
        </div>
    </div>

    <!-- 訂票選擇區塊 -->
    <div v-if="!showSeats" class="selection-section">
        <!-- 影廳選擇 -->
        <transition name="slide-up">
            <div class="mb-4">
                <h3 class="selection-title">選擇影廳</h3>
                <div class="button-group">
                    <button class="btn btn-custom"
                            v-for="theater in theaters"
                            :key="theater.id"
                            v-bind:class="{ selected: selectedTheater === theater }"
                            v-on:click="selectTheater(theater)">
                        {{ theater.text }}
                    </button>
                </div>
            </div>
        </transition>

        <!-- 日期選擇區塊 -->
        <transition name="slide-up">
            <div class="mb-4" v-if="selectedTheater && dates.length > 0">
                <h3>選擇日期</h3>
                <div>
                    <button class="btn btn-secondary btn-custom"
                            v-for="(date, index) in dates"
                            :key="index"
                            v-bind:class="{ selected: selectedDate === date }"
                            v-on:click="selectDate(date)">
                        {{ date }}
                    </button>
                </div>
            </div>
        </transition>

        <!-- 時間選擇區塊 -->
        <transition name="slide-up">
            <div class="mb-4" v-if="selectedTheater && selectedDate">
                <h3>{{ selectedTheater.text }} - 時間</h3>
                <div>
                    <button class="btn btn-info btn-custom"
                            v-for="(time, index) in times"
                            :key="index"
                            v-bind:class="{ selected: selectedTime === time }"
                            v-on:click="selectTime(time)">
                        {{ time }}
                    </button>
                </div>
            </div>
        </transition>
        <transition name="slide-up">
            <div v-if="selectedTime" class="mb-4">
                <h3>選擇票種時段</h3>
                <select class="form-control mb-3" v-model="selectedTicketSale">
                    <option v-for="(sale, index) in ticketSales"
                            :key="index"
                            v-bind:class="{ selected: selectedTicketSale === sale }"
                            v-on:click="selectTicketSale(ticketSale)">
                        {{ sale }}
                    </option>
                </select>
                <h3 class="mt-4" v-if="selectedTicketSale">票種</h3>
                <div v-if="selectedTicketSale">
                    <select class="form-control" v-model="selectedTicketType">
                        <option v-for="(type, index) in ticketTypes"
                                :key="index"
                                :value="type"
                                v-bind:class="{ selected: selectedTicketType === type }"
                                v-on:click="selectedTicketType(ticketType)">
                            {{ type }}
                        </option>
                    </select>
                </div>
                <div v-if="selectedTicketType" class="mt-4">
                    <h4 v-bind:class="{ selected: selectedTicketPrice === ticketPrices[selectedTicketType] }"
                        v-on:click="selectedTicketPrice = ticketPrices[selectedTicketType]">
                        單價: {{ ticketPrices[selectedTicketType] }}  元
                    </h4>
                    <div class="mt-4">
                        <h3>數量</h3>
                        <select class="form-control mt-1" v-model="selectedQuantity">
                            <option v-for="n in 6" :key="n" :value="n">{{ n }}</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>人數:&nbsp</label>
                        <span>{{ calculatedReservedSeats  }} 人</span>
                    </div>

                    <h3 class="mt-4">總共價錢: {{ totalPrice }} 元</h3>
                    <button class="btn btn-success"
                            v-if="selectedQuantity > 0"
                            v-on:click="selectSeats">
                        選擇座位
                    </button>
                </div>
            </div>
        </transition>
    </div>

    <!-- 座位選擇區 -->
    <!-- 座位選擇區域的 HTML 部分 -->
    <div v-if="showSeats" class="seat-view-container">
        <!-- 新增控制按鈕容器 -->
        <div class="seat-controls-wrapper">
            <button class="btn btn-danger ms-auto" v-on:click="goBack">回上一步</button>
        </div>

        <h3 class="text-center">影廳座位選擇</h3>

        <!-- 座位圖例 -->
        <div class="legend">
            <div class="legend-item">
                <div class="legend-box"></div>
                <span>可選座位</span>
            </div>
            <div class="legend-item">
                <div class="legend-box selected"></div>
                <span>已選取</span>
            </div>
            <div class="legend-item">
                <div class="legend-box unavailable"></div>
                <span>無法選取</span>
            </div>
        </div>

        <!-- 銀幕 -->
        <div class="screen">銀幕</div>

        <!-- 座位區域 -->
        <div class="seat-container">
            <div v-for="row in uniqueRows" :key="row" class="seat-row">
                <div class="row-number">{{ row }}</div>
                <div class="seat-section">
                    <template v-for="seat in getSeatsForRow(row)" :key="seat.Id">
                        <!-- 插入走道空隙 -->
                        <div v-if="shouldAddGap(seat.Number)" class="seat gap"></div>

                        <!-- 座位 -->
                        <div class="seat"
                             v-bind:class="{
                                    'selected': getSeatStatus(seat.Row, seat.Number) === SEAT_STATUS.SELECTED,
                                    'unavailable': getSeatStatus(seat.Row, seat.Number) === SEAT_STATUS.DISABLED || 
                                                  getSeatStatus(seat.Row, seat.Number) === SEAT_STATUS.OCCUPIED
                                 }"
                             v-on:click="toggleSeat(seat.Row, seat.Number)">
                            {{ seat.Number }}
                        </div>
                    </template>
                </div>
                <div class="row-number">{{ row }}</div>
            </div>
        </div>
        @if (User.Identity.IsAuthenticated)
        {
            <div class="booking-controls-wrapper">
                <button class="btn btn-success ms-auto"
                        v-if="selectedSeats.size === calculatedReservedSeats"
                        v-on:click="completeBooking">
                    訂票完成
                </button>
            </div>
        }
        else
        {
            <div class="booking-controls-wrapper">
                <a class="btn btn-success ms-auto" href="/Members/Login">
                    訂票完成
                </a>
            </div>
        }
    </div>

</div>

<script src="https://unpkg.com/vue@3.3.4/dist/vue.global.js"></script>
<script src="https://unpkg.com/element-plus@2.2.30/dist/index.full.js"></script>
<link href="https://unpkg.com/element-plus@2.2.30/dist/index.css" rel="stylesheet">

<!-- ✅ 引入 Axios -->
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
    const { createApp, ref, reactive, computed, onMounted, watch } = Vue;

    // 定義座位狀態常量
    const SEAT_STATUS = {
        AVAILABLE: 'Available',
        OCCUPIED: 'Occupied',
        DISABLED: 'Disabled',
        SELECTED: 'Selected'
    };

    // 解構 ElementPlus 中所需的組件
    const { ElRate, ElCard, ElDescriptions, ElDescriptionsItem } = ElementPlus;

    const app = createApp({
        setup() {
            const movie = ref({
                poster: '',
                title: '',
                rating_score: 0,
                rating_count: 0,
                genre: '',
                rating: '',
                duration: '',
                releaseDate: '',
                director: ''
            });
            const movies = ref([]);
            const theaters = ref([]);
            const showTimes = ref([]); // 正確定義 showTimes
            const dates = ref([]);
            const times = ref([]);
            const screeningId = ref([]);

            const ticket = ref([]);
            const ticketId = ref([]);
            const ticketSales = ref([]);
            const ticketTypes = ref([]);
            const ticketPrices = ref({});
 

            const selectedMovie = ref(null);
            const selectedTheater = ref(null);
            const selectedDate = ref(null);
            const selectedTime = ref(null);
            const selectedTicketSale = ref(null);
            const selectedTicketType = ref(null);
            const selectedTicketPrice = ref(0);
            const selectedQuantity = ref(1);  // 預設數量為 1
            const reservedSeats = ref(null);  // 票種的位子(Ticket)

            // 新增儲存選中座位資訊的變數
            const selectedSeatIds = ref([]);
            const selectedScreeningId = ref(null);

            

            // 在組件掛載時載入電影資料
            onMounted(async () => {
                try {
                    // 從 URL 獲取 movieId
                    const urlParams = new URLSearchParams(window.location.search);
                    const movieId = urlParams.get('movieId');

                    console.log("movieId: ", movieId);

                    if (movieId) {
                        // 獲取電影資料
                        const response = await axios.post(`/Movies/GetMovie`, { movieId });
                        if (response.data.success) {
                            const movieData = response.data.data;
                            movie.value = {
                                id: movieData.Id,
                                title: movieData.Title,
                                poster: movieData.PosterURL,
                                genre: movieData.GenreName,
                                rating: movieData.RatingName,
                                duration: `${movieData.RunTime}分鐘`,
                                releaseDate: new Date(movieData.ReleaseDate).toLocaleDateString(),
                                director: movieData.Director,
                                cast: movieData.Cast,
                                rating_score: movieData.AverageRating || 0,
                                rating_count: movieData.ReviewCount,
                                description: movieData.Description,
                                canReview: movieData.CanReview,
                                reviews: movieData.Reviews || []
                            };
                        }

                        // 新增 API 請求來獲取包含該電影的影廳列表
                        const theaterResponse = await axios.post(`/Tickets/GetTheaters`, { movieId });
                        
                        if (theaterResponse.data.success) {
                            theaters.value = theaterResponse.data.data.map(theater => ({
                                value: theater.Id,
                                text: theater.Name
                            }));
                            console.log('包含該電影的影廳列表：', theaters.value);
                        } else {
                            console.error('無法取得影廳列表:', theaterResponse.data.message);
                        }
                    }
                } catch (error) {
                    console.error('載入資料時發生錯誤:', error);
                    ElementPlus.ElMessage.error('載入資料失敗');
                }
            });

            // 每張票對應一個人 算人數
            const calculatedReservedSeats = computed(() => {
                if (!selectedTicketType.value || !selectedTicketSale.value) return 0;
                return selectedQuantity.value * reservedSeats.value;
            });

            const findTicketId = computed(() => {
                if (!selectedTicketSale.value || !selectedTicketType.value) {
                    return null;
                }

                const foundTicket = ticket.value.find(t =>
                    t.SalesType === selectedTicketSale.value &&
                    t.TicketType === selectedTicketType.value
                );

                return foundTicket ? foundTicket.Id : null;
            });

            // 計算總價的邏輯保持不變
            const totalPrice = computed(() => {
                if (!selectedTicketType.value || !selectedQuantity.value) return 0;
                return ticketPrices.value[selectedTicketType.value] * selectedQuantity.value;
            });

            // 座位相關
            const showSeats = ref(false);
            const seatStatus = ref([]);
            const selectedSeats = reactive(new Set());
            const unavailableSeats = reactive(
                new Set([
                    "1-2", "1-3", "1-4",
                    "5-5", "5-6", "5-7", "5-8",
                    "10-18"
                ])
            );

            const watchQuantity = watch(selectedQuantity, (newValue) => {
                if (calculatedReservedSeats.value > 6) {
                    alert('每次訂票人數不能超過 6 人！');
                    selectedQuantity.value = Math.floor(6 / (selectedTicketType.value ? 1 : 1)); // 重置為允許的最大數量
                }
            });

            // 計算所有唯一的排數
            const uniqueRows = computed(() => {
                if (!seatStatus.value) return [];
                return [...new Set(seatStatus.value.map(seat => seat.Row))].sort();
            });

            // 獲取特定排的所有座位
            const getSeatsForRow = (row) => {
                return seatStatus.value
                    .filter(seat => seat.Row === row)
                    .sort((a, b) => a.Number - b.Number);
            };

            // 判斷是否需要插入走道空隙
            const shouldAddGap = (seatNumber) => {
                return seatNumber === 4 || seatNumber === 14; // 可以根據實際需求調整
            };


            const selectMovie = (movie) => (selectedMovie.value = movie);
            // 選擇影廳
            const selectTheater = (theater) => {
                selectedTheater.value = theater;
                console.log("選擇的影廳 ID:", theater.text);
                console.log("選擇的電影:", movie.value.id);

                axios.post('/Tickets/GetShowTimes', { theaterName: theater.text, movieId: movie.value.id  })
                    .then(response => {
                        console.log("伺服器回應:", response);

                        if (response.data && response.data.success) {
                            if (response.data.data && Array.isArray(response.data.data)) {
                                showTimes.value = response.data.data;

                                console.log("選擇的影廳時間:", showTimes.value);

                                const parsedDates = [...new Set(response.data.data.map(item => item.Televising))];
                                dates.value = parsedDates;

                                times.value = [];
                                selectedDate.value = null;
                                selectedTime.value = null;
                            } else {
                                console.error("伺服器回傳的資料格式不正確:", response.data.data);
                                alert("伺服器回傳的資料格式不正確。");
                            }
                        } else {
                            const errorMessage = response.data ? response.data.message : "未知的錯誤";
                            console.error("伺服器回傳錯誤:", errorMessage);
                            alert("伺服器回傳錯誤: " + errorMessage);
                        }
                    })
                    .catch(error => {
                        console.error('請求發生錯誤:', error); // 保留原始錯誤訊息

                        let errorMessage = "與伺服器通訊時發生錯誤。"; // 預設錯誤訊息

                        if (error.response) {
                            // 伺服器回傳錯誤
                            errorMessage = `伺服器錯誤：${error.response.status} - ${error.response.data?.message || "請稍後再試"}`; // 包含狀態碼和伺服器訊息
                            console.error("伺服器回傳錯誤:", error.response.status, error.response.data); // 輸出詳細的伺服器錯誤資訊
                        } else if (error.request) {
                            // 沒有收到回應
                            errorMessage = "無法連線到伺服器，請檢查網路連線。";
                        }

                        alert(errorMessage); // 只顯示一個 alert
                    });
            };

            const selectDate = (date) => {
                selectedDate.value = date;
                //console.log("showTimes.value: ", showTimes.value)

                times.value = showTimes.value
                    .filter(item => {
                        const itemDate = new Date(item.Televising);
                        const selectedDateObj = new Date(date);
                        return itemDate.getFullYear() === selectedDateObj.getFullYear() &&
                            itemDate.getMonth() === selectedDateObj.getMonth() &&
                            itemDate.getDate() === selectedDateObj.getDate();
                    })
                    .map(item => {
                        //console.log("轉換項目:", item);
                        //console.log("item.StartTime:", item.StartTime);

                        if (!item.StartTime) {
                            console.log("item.StartTime 是 undefined 或 null");
                            return null;
                        }

                        return item.StartTime;

                    }).filter(time => time !== null);

                screeningId.value = showTimes.value
                    .filter(item => {
                        const itemDate = new Date(item.Televising);
                        const selectedDateObj = new Date(date);
                        return itemDate.getFullYear() === selectedDateObj.getFullYear() &&
                            itemDate.getMonth() === selectedDateObj.getMonth() &&
                            itemDate.getDate() === selectedDateObj.getDate();
                    })
                    .map(item => {
                        //console.log("轉換項目:", item);
                        //console.log("item.StartTime:", item.StartTime);

                        if (!item.Id) {
                            console.log("item.Id 是 undefined 或 null");
                            return null;
                        }

                        return item.Id;
                    })

                console.log("ScreeningId:", screeningId.value);

                console.log("篩選後的時間:", times.value);
            };

            const selectTime = (time) => {
                selectedTime.value = time;

                // 檢查 screeningId 是否有值
                if (!screeningId.value || screeningId.value.length === 0) {
                    console.error('沒有場次編號');
                    alert('請先選擇場次');
                    return;
                }

                // 儲存選中的 screeningId
                selectedScreeningId.value = parseInt(screeningId.value);

                // 準備請求資料
                const requestData = {
                    screeningId: parseInt(screeningId.value)  // 確保轉換為數字
                };

                console.log('發送的資料：', requestData);  // 偵錯用

                axios.post('/Tickets/GetTicket', requestData)
                    .then(response => {
                        if (response.data && response.data.success) {
                            ticket.value = response.data.data;
                            console.log('取得的票券資料：', ticket.value);

                            if (Array.isArray(response.data.data)) {

                                // 儲存票種時段
                                ticketSales.value = [...new Set(response.data.data.map(item => item.SalesType))];

                                const ticketTypesSet = new Set();
                                const ticketPricesMap = {};
                                const reservedSeatsMap = {}; // 新增一個 Map 來存儲不同票種的預留座位數

                                response.data.data.forEach(item => {
                                    ticketTypesSet.add(item.TicketType);

                                    // 使用組合鍵來存儲價格和預留座位數
                                    const key = `${item.SalesType}-${item.TicketType}`;
                                    if (!ticketPricesMap[item.TicketType]) {
                                        ticketPricesMap[item.TicketType] = item.Price;
                                    }
                                    // 存儲預留座位數
                                    reservedSeatsMap[key] = item.ReservedSeats;
                                });

                                ticketTypes.value = Array.from(ticketTypesSet);
                                ticketPrices.value = ticketPricesMap;

                                // 監聽選擇變化並更新預留座位數
                                watch([selectedTicketSale, selectedTicketType], ([newSale, newType]) => {
                                    if (newSale && newType) {
                                        const key = `${newSale}-${newType}`;
                                        reservedSeats.value = reservedSeatsMap[key] || 1;
                                        // 自動更新選擇的數量為預留座位數
                                        selectedQuantity.value = reservedSeats.value;
                                    }
                                });

                                console.log('票種資料：', ticketTypes.value);
                                console.log('票價資料：', ticketPrices.value);
                                console.log('預留座位對應表：', reservedSeatsMap);
                            }
                        } else {
                            alert(response.data.message || '取得票券資料失敗');
                        }
                    })
                    .catch(error => {
                        console.error('錯誤：', error);
                        alert('發生錯誤，請稍後再試');
                    });
            };

            const selectTicketSale = (ticketSale) => {
                selectedTicketSale.value = ticketSale;
                console.log("ticketSale:", ticketSale);
            };

            const selectTicketType = (ticketType) => {
                selectedTicketType.value = ticketType;

                // 自動設定對應的票價
                selectedTicketPrice.value = ticketPrices.value[ticketType];

                console.log("已選擇票種:", ticketType);
                console.log("對應票價:", selectedTicketPrice.value);
            };

            const selectTicketPrice = (price) => {
                selectedTicketPrice.value = price;
                console.log('已選擇的票價:', selectedTicketPrice.value);
            };

            const selectSeats = () => {

                // 首先檢查人數限制
                if (calculatedReservedSeats.value > 6) {
                    alert('每次訂票人數不能超過 6 人！請重新選擇票數。');
                    return;
                }

                // 檢查 screeningId 是否有值
                if (!screeningId.value || screeningId.value.length === 0) {
                    console.error('沒有場次編號');
                    alert('請先選擇場次');
                    return;
                }

                // 檢查並取得票券 ID
                const ticketId = findTicketId.value;
                if (!ticketId) {
                    console.error('找不到對應的票券');
                    alert('請確認票種選擇');
                    return;
                }

                console.log('選擇的票券 ID:', ticketId);

                // 準備請求資料
                const requestData = {
                    screeningId: parseInt(screeningId.value),
                    theaterName: selectedTheater.value.text,
                };

                console.log('發送座位狀態請求：', requestData);
                console.log('selectedTheater:', selectedTheater);  // 檢查整個物件
                console.log('selectedTheater.text:', selectedTheater.value.text);  // 正確的存取方式

                // 呼叫 API 獲取座位狀態
                axios.post('/Tickets/GetSeatStatus', requestData)
                    .then(response => {
                        if (response.data && response.data.success) {
                            seatStatus.value = response.data.data;
                            updateSeatStatus(response.data.data);
                            showSeats.value = true;

                            console.log('收到的座位狀態數據:', response.data.data);  // 添加日誌
                        } else {
                            alert(response.data.message || '取得座位狀態失敗');
                        }
                    })
                    .catch(error => {
                        console.error('錯誤：', error);
                        alert('發生錯誤，請稍後再試');
                    });
            };

            const goBack = () => (showSeats.value = false);

            // 使用 reactive 來管理座位狀態
            const seatStatusMap = reactive(new Map());

            // 更新座位狀態的函數
            const updateSeatStatus = (seatData) => {
                seatData.forEach(seat => {
                    const seatKey = `${seat.Row.trim()}-${seat.Number.trim()}`;
                    let status = SEAT_STATUS.AVAILABLE;

                    if (seat.IsDisabled) {
                        status = SEAT_STATUS.DISABLED;
                    } else if (seat.Status === "不可使用" || seat.Status === "已訂位") {
                        status = SEAT_STATUS.OCCUPIED;
                    }

                    seatStatusMap.set(seatKey, {
                        id: seat.Id,
                        status: status,
                        seatId: seat.SeatId,
                        screeningId: seat.ScreeningId
                    });
                });
            };

            // 檢查座位狀態的函數
            const getSeatStatus = (row, col) => {
                const seatKey = `${row.trim()}-${col.trim()}`;
                return seatStatusMap.get(seatKey)?.status || SEAT_STATUS.AVAILABLE;
            };


            const isSelected = (row, col) => {
                const seatKey = `${row}-${col}`;
                return selectedSeats.has(seatKey);
            };

            // 修改後的 isUnavailable 函數
            const isUnavailable = (row, col) => {
                const status = getSeatStatus(row, col);
                return status === SEAT_STATUS.DISABLED || status === SEAT_STATUS.OCCUPIED;
            };


            // 這裡在檢查和切割座位 ID
            // 修改 toggleSeat 函數
            const toggleSeat = (row, col) => {
                const seatKey = `${row.trim()}-${col.trim()}`;
                const currentStatus = getSeatStatus(row, col);

                // 如果座位不可用，直接返回
                if (currentStatus === SEAT_STATUS.DISABLED || currentStatus === SEAT_STATUS.OCCUPIED) {
                    console.log('此座位不可選擇');
                    return;
                }

                const seat = seatStatusMap.get(seatKey);
                if (!seat) {
                    console.error('找不到對應的座位資料');
                    return;
                }

                // 處理座位選擇
                if (selectedSeats.has(seatKey)) {
                    // 取消選擇座位
                    selectedSeats.delete(seatKey);
                    selectedSeatIds.value = selectedSeatIds.value.filter(id => id !== seat.id);
                    seat.status = SEAT_STATUS.AVAILABLE;
                } else {
                    // 檢查是否超過允許選擇的座位數
                    if (selectedSeats.size >= calculatedReservedSeats.value) {
                        alert(`最多只能選擇 ${calculatedReservedSeats.value} 個座位！`);
                        return;
                    }
                    // 選擇座位
                    selectedSeats.add(seatKey);
                    selectedSeatIds.value.push(seat.id);
                    seat.status = SEAT_STATUS.SELECTED;
                }

                console.log('已選擇的座位：', Array.from(selectedSeats));
                console.log('已選擇的座位 ID：', selectedSeatIds.value);
            };

            // 完成訂票時的座位處理
            const completeBooking = () => {

                if (selectedSeats.size < calculatedReservedSeats.value) {
                    alert(`請選擇 ${calculatedReservedSeats.value} 個座位！`);
                    return;
                }

                const selectedSeatsList = Array.from(selectedSeats).map(seatId => {
                    const [row, number] = seatId.split('-');
                    return `${row}${number}`;
                }).join('、');

                // 取得票券 ID
                const ticketId = findTicketId.value;
                if (!ticketId) {
                    alert('找不到對應的票券，請重新選擇票種');
                    return;
                }

                console.log('準備發送請求，參數：', {
                    ticketId: ticketId,
                    qty: selectedQuantity.value
                });

                // 將座位ID和場次ID轉換為字串
                const seatIdsString = selectedSeatIds.value.join(',');

                axios({
                    method: 'get',
                    url: '/Carts/AddItem',
                    params: {
                        ticketId: ticketId,
                        qty: calculatedReservedSeats.value,
                        seatName: selectedSeatsList,
                        seatIds: seatIdsString,           // 新增座位ID參數
                        screeningId: selectedScreeningId.value,  // 新增場次ID參數
                        reservedSeats: calculatedReservedSeats.value // 添加人數參數
                    }
                })
                    .then(response => {
                        console.log('請求成功：', response);
                        const selectedSeatsList = Array.from(selectedSeats).map(seatId => {
                            const [row, number] = seatId.split('-');
                            return `${row}排${number}號`;
                        }).join('、');
                        alert(`訂票完成！\n已選擇座位：${selectedSeatsList}\n總價：${totalPrice.value}元`);

                        // 確保 screeningId 有值
                        if (!selectedScreeningId.value) {
                            alert('無效的場次ID');
                            return;
                        }
                        
                        // 本地存放值
                        let localStroageData = [];

                        // 取得現有的 screeningIds（如果有的話）
                        let screeningIds = JSON.parse(localStorage.getItem('screeningIds') || '[]');

                        // 加入新的 screeningId
                        if (!screeningIds.includes(selectedScreeningId.value)) {
                          screeningIds.push(selectedScreeningId.value);
                          localStorage.setItem('screeningIds', JSON.stringify(screeningIds));

                          // 建立一個物件，包含場次 ID 和座位資訊
                          const bookingData = {
                            screeningId: selectedScreeningId.value,
                            seatName: selectedSeatsList
                          };

                          // 將物件推入 localStroageData 陣列
                          localStroageData.push(bookingData);

                          // 將 localStroageData 轉換為 JSON 字串並存入 localStorage
                          localStorage.setItem('localStroageData', JSON.stringify(localStroageData));
                        }



                        // 修改重導向時加入參數
                        window.location.href = '/Carts/Index';
                    })
                    .catch(error => {
                        console.error('詳細錯誤資訊：', error.response);
                        console.error('錯誤狀態：', error.response?.status);
                        console.error('錯誤訊息：', error.response?.data);

                        if (error.response && error.response.status === 401) {
                            alert('請先登入會員');
                            window.location.href = '/Account/Login';
                        } else if (error.response && error.response.status === 500) {
                            alert('伺服器處理請求時發生錯誤，請確認資料是否正確');
                        } else {
                            alert('加入購物車失敗，請稍後再試');
                        }
                    });

            };

            return {
                movie,
                movies,
                theaters,
                dates,
                times,
                screeningId,
                ticket,
                findTicketId,
                ticketId,
                ticketSales,
                ticketTypes,
                ticketPrices,
                seatStatus,
                watchQuantity,
                reservedSeats,
                uniqueRows,
                getSeatsForRow,
                shouldAddGap,
                selectedMovie,
                selectedTheater,
                selectedDate,
                selectedTime,
                selectedTicketSale,
                selectedTicketType,
                selectedTicketPrice,
                selectedQuantity,
                selectedSeats,
                selectedSeatIds,
                selectedScreeningId,
                showSeats,
                totalPrice,
                selectMovie,
                selectTheater,
                selectDate,
                selectTime,
                selectSeats,
                selectTicketSale,
                selectTicketType,
                selectTicketPrice,
                goBack,
                isSelected,
                isUnavailable,
                toggleSeat,
                completeBooking,
                calculatedReservedSeats,
                seatStatusMap,
                getSeatStatus,
                isUnavailable,
                toggleSeat,
                selectSeats,
                SEAT_STATUS,
            };
        },
    })

    // 使用 Element Plus
    app.use(ElementPlus);

    // 分別註冊需要的組件
    app.component('el-rate', ElRate);
    app.component('el-card', ElCard);
    app.component('el-descriptions', ElDescriptions);
    app.component('el-descriptions-item', ElDescriptionsItem);

    // 掛載應用
    app.mount("#app");
</script>

@section styles
{
    <link href="~/Content/Ticket.css" rel="stylesheet">
}

